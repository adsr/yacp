--- origsrc/oiio-Release-2.1.18.1/CMakeLists.txt	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/CMakeLists.txt	2020-08-21 15:33:34.280697600 +0900
@@ -214,9 +214,15 @@ IF ( NOT MSVC )
 ENDIF()
 
 # Oddball: install the FindOpenImageIO.cmake file
-install (FILES src/cmake/modules/FindOpenImageIO.cmake
-         DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/cmake/Modules
-         COMPONENT cmake)
+if (CYGWIN)
+    install (FILES src/cmake/modules/FindOpenImageIO.cmake
+            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/OpenImageIO
+            COMPONENT cmake)
+else()
+    install (FILES src/cmake/modules/FindOpenImageIO.cmake
+            DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/cmake/Modules
+            COMPONENT cmake)
+endif()
 
 # Export the configuration files. There are also library-specific config
 # exports in the CMakeLists.txt of libOpenImageIO.
--- origsrc/oiio-Release-2.1.18.1/src/cineon.imageio/CMakeLists.txt	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/cineon.imageio/CMakeLists.txt	2020-08-21 13:17:26.366347900 +0900
@@ -2,7 +2,4 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-add_oiio_plugin (cineoninput.cpp
-                 libcineon/Cineon.cpp libcineon/OutStream.cpp libcineon/Codec.cpp
-                 libcineon/Reader.cpp libcineon/Writer.cpp libcineon/CineonHeader.cpp
-                 libcineon/ElementReadStream.cpp libcineon/InStream.cpp)
+add_oiio_plugin (cineoninput.cpp)
--- origsrc/oiio-Release-2.1.18.1/src/cineon.imageio/cineoninput.cpp	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/cineon.imageio/cineoninput.cpp	2020-08-21 13:17:54.693266100 +0900
@@ -2,7 +2,7 @@
 // SPDX-License-Identifier: BSD-3-Clause
 // https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-#include "libcineon/Cineon.h"
+#include <Cineon.h>
 
 #include <OpenImageIO/dassert.h>
 #include <OpenImageIO/fmath.h>
@@ -10,8 +10,6 @@
 #include <OpenImageIO/strutil.h>
 #include <OpenImageIO/typedesc.h>
 
-using namespace cineon;
-
 OIIO_PLUGIN_NAMESPACE_BEGIN
 
 
--- origsrc/oiio-Release-2.1.18.1/src/cmake/externalpackages.cmake	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/cmake/externalpackages.cmake	2020-08-21 13:24:02.256015300 +0900
@@ -375,3 +375,7 @@ endmacro()
 
 find_or_download_fmt()
 include_directories (${FMT_INCLUDES})
+
+find_package(pkgconfig)
+pkg_check_modules(DPX REQUIRED dpx)
+pkg_check_modules(LIBCINEON REQUIRED libcineon)
--- origsrc/oiio-Release-2.1.18.1/src/dpx.imageio/CMakeLists.txt	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/dpx.imageio/CMakeLists.txt	2020-08-21 13:21:24.192794200 +0900
@@ -3,7 +3,5 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 add_oiio_plugin (dpxinput.cpp dpxoutput.cpp
-  libdpx/DPX.cpp libdpx/OutStream.cpp libdpx/RunLengthEncoding.cpp
-  libdpx/Codec.cpp libdpx/Reader.cpp libdpx/Writer.cpp libdpx/DPXHeader.cpp
-  libdpx/ElementReadStream.cpp libdpx/InStream.cpp libdpx/DPXColorConverter.cpp
+  libdpx/DPXColorConverter.cpp
   LINK_LIBRARIES ${OPENEXR_LIBRARIES})
--- origsrc/oiio-Release-2.1.18.1/src/dpx.imageio/dpxinput.cpp	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/dpx.imageio/dpxinput.cpp	2020-08-21 13:22:24.975752800 +0900
@@ -8,8 +8,8 @@
 
 // Note: libdpx originally from: https://github.com/PatrickPalmer/dpx
 // But that seems not to be actively maintained.
-#include "libdpx/DPX.h"
-#include "libdpx/DPXColorConverter.h"
+#include <DPX.h>
+#include "DPXColorConverter.h"
 
 #include <OpenImageIO/fmath.h>
 #include <OpenImageIO/imageio.h>
--- origsrc/oiio-Release-2.1.18.1/src/dpx.imageio/dpxoutput.cpp	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/dpx.imageio/dpxoutput.cpp	2020-08-21 13:22:46.219301500 +0900
@@ -9,8 +9,8 @@
 
 // Note: libdpx originally from: https://github.com/PatrickPalmer/dpx
 // But that seems not to be actively maintained.
-#include "libdpx/DPX.h"
-#include "libdpx/DPXColorConverter.h"
+#include <DPX.h>
+#include "DPXColorConverter.h"
 
 #include <OpenImageIO/fmath.h>
 #include <OpenImageIO/imageio.h>
--- origsrc/oiio-Release-2.1.18.1/src/include/OpenImageIO/strutil.h	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/include/OpenImageIO/strutil.h	2020-08-21 13:23:48.227475100 +0900
@@ -14,6 +14,7 @@
 
 #pragma once
 
+#include <cstdarg>
 #include <cstdio>
 #include <map>
 #include <string>
--- origsrc/oiio-Release-2.1.18.1/src/libOpenImageIO/CMakeLists.txt	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/libOpenImageIO/CMakeLists.txt	2020-08-21 13:30:13.912843500 +0900
@@ -168,7 +168,10 @@ if (MINGW)
     target_link_libraries (OpenImageIO PRIVATE ws2_32)
 endif()
 
+include_directories (../dpx.imageio/libdpx/)
 
+target_link_libraries (OpenImageIO PRIVATE ${DPX_LIBRARIES})
+target_link_libraries (OpenImageIO PRIVATE ${LIBCINEON_LIBRARIES})
 
 if (MSVC)
     # In some MSVC setups, the IBA functions with huge template expansions
--- origsrc/oiio-Release-2.1.18.1/src/libutil/argparse.cpp	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/libutil/argparse.cpp	2020-08-21 13:25:42.113814900 +0900
@@ -3,6 +3,7 @@
 // https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 
+#include <alloca.h>
 #include <cassert>
 #include <cctype>
 #include <cstdarg>
--- origsrc/oiio-Release-2.1.18.1/src/libutil/plugin.cpp	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/libutil/plugin.cpp	2020-08-21 14:01:23.403342900 +0900
@@ -31,7 +31,7 @@ static std::string last_error;
 const char*
 Plugin::plugin_extension(void)
 {
-#if defined(_WIN32)
+#if defined(_WIN32) || defined(__CYGWIN__)
     return "dll";
 #else
     return "so";
--- origsrc/oiio-Release-2.1.18.1/src/libutil/sysutil.cpp	2020-08-02 00:09:58.000000000 +0900
+++ src/oiio-Release-2.1.18.1/src/libutil/sysutil.cpp	2020-08-21 13:27:24.954093400 +0900
@@ -12,7 +12,7 @@
 #include <string>
 #include <thread>
 
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
 #    include <sys/ioctl.h>
 #    include <sys/sysinfo.h>
 #    include <unistd.h>
@@ -81,7 +81,7 @@ using namespace Sysutil;
 size_t
 Sysutil::memory_used(bool resident)
 {
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
 #    if 0
     // doesn't seem to work?
     struct rusage ru;
@@ -141,7 +141,7 @@ Sysutil::memory_used(bool resident)
 size_t
 Sysutil::physical_memory()
 {
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
     size_t size = 0;
     FILE* file  = fopen("/proc/meminfo", "r");
     if (file) {
@@ -229,7 +229,7 @@ Sysutil::this_program_path()
 
     char filename[10240] = "";
 
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
     unsigned int size = sizeof(filename);
     int r             = readlink("/proc/self/exe", filename, size);
     // user won't get the right answer if the filename is too long to store
@@ -292,7 +292,7 @@ Sysutil::terminal_columns()
     int columns = 80;  // a decent guess, if we have nothing more to go on
 
 #if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)           \
-    || defined(__FreeBSD_kernel__) || defined(__GNU__)
+    || defined(__FreeBSD_kernel__) || defined(__GNU__) || defined(__CYGWIN__)
     struct winsize w;
     ioctl(0, TIOCGWINSZ, &w);
     columns = w.ws_col;
@@ -316,7 +316,7 @@ Sysutil::terminal_rows()
     int rows = 24;  // a decent guess, if we have nothing more to go on
 
 #if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)           \
-    || defined(__FreeBSD_kernel__) || defined(__GNU__)
+    || defined(__FreeBSD_kernel__) || defined(__GNU__) || defined(__CYGWIN__)
     struct winsize w;
     ioctl(0, TIOCGWINSZ, &w);
     rows = w.ws_row;
@@ -504,7 +504,7 @@ Sysutil::put_in_background(int, char*[])
     // But it suffers from the same problem on OS X, and seems to just be
     // a wrapper for fork.
 
-#if defined(__linux__) || defined(__GLIBC__)
+#if defined(__linux__) || defined(__GLIBC__) || defined(__CYGWIN__)
     // Simplest case:
     // daemon returns 0 if successful, thus return true if successful
     return daemon(1, 1) == 0;
