--- origsrc/aom/CMakeLists.txt	2020-08-10 08:32:41.000000000 +0900
+++ src/aom/CMakeLists.txt	2020-08-10 14:56:25.044530400 +0900
@@ -49,6 +49,11 @@ include("${AOM_ROOT}/build/cmake/sanitiz
 include("${AOM_ROOT}/build/cmake/util.cmake")
 include("${AOM_ROOT}/test/test.cmake")
 
+# Package
+find_package(PkgConfig REQUIRED)
+pkg_check_modules(LIBWEBM libwebm)
+pkg_check_modules(LIBYUV libyuv)
+
 list(APPEND AOM_RTCD_SOURCES
             "${AOM_CONFIG_DIR}/config/aom_dsp_rtcd.h"
             "${AOM_CONFIG_DIR}/config/aom_scale_rtcd.h"
@@ -61,6 +66,7 @@ list(APPEND AOM_RTCD_SOURCES
             "${AOM_ROOT}/av1/common/av1_rtcd.c"
             "${AOM_ROOT}/build/cmake/rtcd.pl")
 
+if(NOT LIBWEBM_FOUND)
 list(APPEND AOM_LIBWEBM_SOURCES
             "${AOM_ROOT}/third_party/libwebm/common/hdr_util.cc"
             "${AOM_ROOT}/third_party/libwebm/common/hdr_util.h"
@@ -76,7 +82,9 @@ list(APPEND AOM_LIBWEBM_SOURCES
             "${AOM_ROOT}/third_party/libwebm/mkvparser/mkvparser.h"
             "${AOM_ROOT}/third_party/libwebm/mkvparser/mkvreader.cc"
             "${AOM_ROOT}/third_party/libwebm/mkvparser/mkvreader.h")
+endif()
 
+if(NOT LIBYUV_FOUND)
 list(APPEND AOM_LIBYUV_SOURCES
             "${AOM_ROOT}/third_party/libyuv/include/libyuv/basic_types.h"
             "${AOM_ROOT}/third_party/libyuv/include/libyuv/convert.h"
@@ -105,6 +113,7 @@ list(APPEND AOM_LIBYUV_SOURCES
             "${AOM_ROOT}/third_party/libyuv/source/scale_neon.cc"
             "${AOM_ROOT}/third_party/libyuv/source/scale_neon64.cc"
             "${AOM_ROOT}/third_party/libyuv/source/scale_win.cc")
+endif()
 
 list(APPEND AOM_SOURCES
             "${AOM_CONFIG_DIR}/config/aom_config.c"
@@ -231,8 +240,10 @@ endif()
 
 add_library(aom ${AOM_SOURCES} $<TARGET_OBJECTS:aom_rtcd>)
 if(BUILD_SHARED_LIBS)
-  add_library(aom_static STATIC ${AOM_SOURCES} $<TARGET_OBJECTS:aom_rtcd>)
-  set_target_properties(aom_static PROPERTIES OUTPUT_NAME aom)
+  if(NOT CYGWIN)
+    add_library(aom_static STATIC ${AOM_SOURCES} $<TARGET_OBJECTS:aom_rtcd>)
+    set_target_properties(aom_static PROPERTIES OUTPUT_NAME aom)
+  endif()
 
   if(NOT MSVC)
     # Extract version string and set VERSION/SOVERSION for the aom target.
@@ -258,14 +269,14 @@ endif()
 
 if(NOT MSVC AND NOT APPLE)
   target_link_libraries(aom ${AOM_LIB_LINK_TYPE} m)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_link_libraries(aom_static ${AOM_LIB_LINK_TYPE} m)
   endif()
 endif()
 
 # List of object and static library targets.
 set(AOM_LIB_TARGETS ${AOM_LIB_TARGETS} aom_rtcd aom_mem aom_scale aom)
-if(BUILD_SHARED_LIBS)
+if(BUILD_SHARED_LIBS AND NOT CYGWIN)
   set(AOM_LIB_TARGETS ${AOM_LIB_TARGETS} aom_static)
 endif()
 
@@ -439,7 +450,7 @@ if(CONFIG_AV1_ENCODER)
     endif()
     message("-- Found VMAF library: " ${VMAF})
     set_target_properties(aom PROPERTIES LINKER_LANGUAGE CXX)
-    if(BUILD_SHARED_LIBS)
+    if(BUILD_SHARED_LIBS AND NOT CYGWIN)
       set_target_properties(aom_static PROPERTIES LINKER_LANGUAGE CXX)
     endif()
     target_link_libraries(aom PRIVATE ${VMAF})
@@ -524,27 +535,39 @@ endforeach()
 
 if(ENABLE_EXAMPLES OR ENABLE_TESTS OR ENABLE_TOOLS)
   if(CONFIG_LIBYUV)
-    add_library(yuv OBJECT ${AOM_LIBYUV_SOURCES})
-    if(NOT MSVC)
-      target_compile_options(yuv PRIVATE -Wno-unused-parameter)
+    if(LIBYUV_FOUND)
+      add_definitions(-DSYSTEM_LIBYUV)
+    else()
+      add_library(yuv OBJECT ${AOM_LIBYUV_SOURCES})
+      if(NOT MSVC)
+        target_compile_options(yuv PRIVATE -Wno-unused-parameter)
+      endif()
+      include_directories("${AOM_ROOT}/third_party/libyuv/include")
     endif()
-    include_directories("${AOM_ROOT}/third_party/libyuv/include")
 
     # Add to existing targets.
     foreach(aom_app ${AOM_APP_TARGETS})
-      target_sources(${aom_app} PRIVATE $<TARGET_OBJECTS:yuv>)
+      if(LIBYUV_FOUND)
+        target_link_libraries(${aom_app} PRIVATE ${LIBYUV_LIBRARIES})
+      else()
+        target_sources(${aom_app} PRIVATE $<TARGET_OBJECTS:yuv>)
+      endif()
       set_property(TARGET ${aom_app} PROPERTY LINKER_LANGUAGE CXX)
     endforeach()
   endif()
 
   if(CONFIG_WEBM_IO)
-    add_library(webm OBJECT ${AOM_LIBWEBM_SOURCES})
-    include_directories("${AOM_ROOT}/third_party/libwebm")
-    target_compile_definitions(webm PRIVATE __STDC_CONSTANT_MACROS)
-    target_compile_definitions(webm PRIVATE __STDC_LIMIT_MACROS)
+    if(LIBWEBM_FOUND)
+      add_definitions(-DSYSTEM_LIBWEBM)
+    else()
+      add_library(webm OBJECT ${AOM_LIBWEBM_SOURCES})
+      include_directories("${AOM_ROOT}/third_party/libwebm")
+      target_compile_definitions(webm PRIVATE __STDC_CONSTANT_MACROS)
+      target_compile_definitions(webm PRIVATE __STDC_LIMIT_MACROS)
 
-    if(NOT MSVC)
-      target_compile_options(webm PRIVATE -Wno-shadow)
+      if(NOT MSVC)
+        target_compile_options(webm PRIVATE -Wno-shadow)
+      endif()
     endif()
 
     # Add to existing targets.
@@ -557,7 +580,11 @@ if(ENABLE_EXAMPLES OR ENABLE_TESTS OR EN
     endif()
 
     foreach(aom_app ${AOM_APP_TARGETS})
-      target_sources(${aom_app} PRIVATE $<TARGET_OBJECTS:webm>)
+      if(LIBWEBM_FOUND)
+        target_link_libraries(${aom_app} PRIVATE ${LIBWEBM_LIBRARIES})
+      else()
+        target_sources(${aom_app} PRIVATE $<TARGET_OBJECTS:webm>)
+      endif()
       set_property(TARGET ${aom_app} PROPERTY LINKER_LANGUAGE CXX)
     endforeach()
   endif()
@@ -572,7 +599,7 @@ endif()
 if(HAVE_PTHREAD_H AND CONFIG_MULTITHREAD)
   find_package(Threads)
   target_link_libraries(aom ${AOM_LIB_LINK_TYPE} Threads::Threads)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_link_libraries(aom_static ${AOM_LIB_LINK_TYPE} Threads::Threads)
   endif()
 endif()
--- origsrc/aom/aom_dsp/aom_dsp.cmake	2020-08-10 08:32:41.000000000 +0900
+++ src/aom/aom_dsp/aom_dsp.cmake	2020-08-10 15:01:06.176538300 +0900
@@ -305,7 +305,7 @@ function(setup_aom_dsp_targets)
   create_dummy_source_file("aom_av1" "c" "dummy_source_file")
   add_library(aom_dsp OBJECT "${dummy_source_file}")
   target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_dsp_common>)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_dsp_common>)
   endif()
   list(APPEND AOM_LIB_TARGETS aom_dsp)
@@ -318,7 +318,7 @@ function(setup_aom_dsp_targets)
     add_library(aom_dsp_decoder OBJECT ${AOM_DSP_DECODER_SOURCES})
     list(APPEND AOM_LIB_TARGETS aom_dsp_decoder)
     target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_dsp_decoder>)
-    if(BUILD_SHARED_LIBS)
+    if(BUILD_SHARED_LIBS AND NOT CYGWIN)
       target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_dsp_decoder>)
     endif()
   endif()
@@ -327,7 +327,7 @@ function(setup_aom_dsp_targets)
     add_library(aom_dsp_encoder OBJECT ${AOM_DSP_ENCODER_SOURCES})
     list(APPEND AOM_LIB_TARGETS aom_dsp_encoder)
     target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_dsp_encoder>)
-    if(BUILD_SHARED_LIBS)
+    if(BUILD_SHARED_LIBS AND NOT CYGWIN)
       target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_dsp_encoder>)
     endif()
   endif()
@@ -412,7 +412,7 @@ function(setup_aom_dsp_targets)
   endif()
 
   target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_dsp>)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_dsp>)
   endif()
 
--- origsrc/aom/aom_mem/aom_mem.cmake	2020-08-10 08:32:42.000000000 +0900
+++ src/aom/aom_mem/aom_mem.cmake	2020-08-10 14:59:55.151246600 +0900
@@ -23,7 +23,7 @@ function(setup_aom_mem_targets)
   add_library(aom_mem OBJECT ${AOM_MEM_SOURCES})
   set(AOM_LIB_TARGETS ${AOM_LIB_TARGETS} aom_mem PARENT_SCOPE)
   target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_mem>)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_mem>)
   endif()
 endfunction()
--- origsrc/aom/aom_scale/aom_scale.cmake	2020-08-10 08:32:42.000000000 +0900
+++ src/aom/aom_scale/aom_scale.cmake	2020-08-10 15:00:18.093019100 +0900
@@ -35,7 +35,7 @@ function(setup_aom_scale_targets)
   endif()
 
   target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_scale>)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_scale>)
   endif()
 
--- origsrc/aom/aom_util/aom_util.cmake	2020-08-10 08:32:42.000000000 +0900
+++ src/aom/aom_util/aom_util.cmake	2020-08-10 14:59:30.342465300 +0900
@@ -25,7 +25,7 @@ function(setup_aom_util_targets)
   add_library(aom_util OBJECT ${AOM_UTIL_SOURCES})
   set(AOM_LIB_TARGETS ${AOM_LIB_TARGETS} aom_util PARENT_SCOPE)
   target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_util>)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_util>)
   endif()
 endfunction()
--- origsrc/aom/apps/aomdec.c	2020-08-10 08:32:42.000000000 +0900
+++ src/aom/apps/aomdec.c	2020-08-10 14:25:58.568441000 +0900
@@ -44,8 +44,12 @@
 #include "common/y4menc.h"
 
 #if CONFIG_LIBYUV
+#if defined(SYSTEM_LIBYUV)
+#include <libyuv.h>
+#else
 #include "third_party/libyuv/include/libyuv/scale.h"
 #endif
+#endif
 
 static const char *exec_name;
 
--- origsrc/aom/apps/aomenc.c	2020-08-10 08:32:42.000000000 +0900
+++ src/aom/apps/aomenc.c	2020-08-10 11:19:28.783654100 +0900
@@ -47,8 +47,12 @@
 #include "stats/rate_hist.h"
 
 #if CONFIG_LIBYUV
+#if defined(SYSTEM_LIBYUV)
+#include <libyuv.h>
+#else
 #include "third_party/libyuv/include/libyuv/scale.h"
 #endif
+#endif
 
 /* Swallow warnings about unused results of fread/fwrite */
 static size_t wrap_fread(void *ptr, size_t size, size_t nmemb, FILE *stream) {
--- origsrc/aom/av1/av1.cmake	2020-08-10 08:32:42.000000000 +0900
+++ src/aom/av1/av1.cmake	2020-08-10 14:58:40.544866500 +0900
@@ -444,7 +444,7 @@ function(setup_av1_targets)
   add_library(aom_av1_common OBJECT ${AOM_AV1_COMMON_SOURCES})
   list(APPEND AOM_LIB_TARGETS aom_av1_common)
   target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_av1_common>)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_av1_common>)
   endif()
 
@@ -452,7 +452,7 @@ function(setup_av1_targets)
     add_library(aom_av1_decoder OBJECT ${AOM_AV1_DECODER_SOURCES})
     set(AOM_LIB_TARGETS ${AOM_LIB_TARGETS} aom_av1_decoder)
     target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_av1_decoder>)
-    if(BUILD_SHARED_LIBS)
+    if(BUILD_SHARED_LIBS AND NOT CYGWIN)
       target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_av1_decoder>)
     endif()
   endif()
@@ -461,7 +461,7 @@ function(setup_av1_targets)
     add_library(aom_av1_encoder OBJECT ${AOM_AV1_ENCODER_SOURCES})
     set(AOM_LIB_TARGETS ${AOM_LIB_TARGETS} aom_av1_encoder)
     target_sources(aom PRIVATE $<TARGET_OBJECTS:aom_av1_encoder>)
-    if(BUILD_SHARED_LIBS)
+    if(BUILD_SHARED_LIBS AND NOT CYGWIN)
       target_sources(aom_static PRIVATE $<TARGET_OBJECTS:aom_av1_encoder>)
     endif()
   endif()
--- origsrc/aom/build/cmake/aom_install.cmake	2020-08-10 08:32:43.000000000 +0900
+++ src/aom/build/cmake/aom_install.cmake	2020-08-10 15:03:20.227604300 +0900
@@ -72,7 +72,7 @@ macro(setup_aom_install_targets)
       endif()
     endif()
 
-    if(BUILD_SHARED_LIBS)
+    if(BUILD_SHARED_LIBS AND NOT CYGWIN)
       set(AOM_INSTALL_LIBS aom aom_static)
     else()
       set(AOM_INSTALL_LIBS aom)
@@ -85,8 +85,9 @@ macro(setup_aom_install_targets)
     install(
       FILES "${AOM_PKG_CONFIG_FILE}"
       DESTINATION "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/pkgconfig")
-    install(TARGETS ${AOM_INSTALL_LIBS} DESTINATION
-                    "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
+    install(TARGETS ${AOM_INSTALL_LIBS}
+                    RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}"
+                    ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
 
     if(ENABLE_EXAMPLES)
       install(TARGETS ${AOM_INSTALL_BINS} DESTINATION
--- origsrc/aom/build/cmake/aom_optimization.cmake	2020-08-10 08:32:43.000000000 +0900
+++ src/aom/build/cmake/aom_optimization.cmake	2020-08-10 15:05:21.417125200 +0900
@@ -69,7 +69,7 @@ function(add_intrinsics_object_library f
   endif()
 
   target_sources(aom PRIVATE $<TARGET_OBJECTS:${target_name}>)
-  if(BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS AND NOT CYGWIN)
     target_sources(aom_static PRIVATE $<TARGET_OBJECTS:${target_name}>)
   endif()
 
@@ -100,7 +100,7 @@ function(get_asm_obj_format out_format)
     if("${AOM_TARGET_SYSTEM}" STREQUAL "Darwin")
       set(objformat "macho64")
     elseif("${AOM_TARGET_SYSTEM}" STREQUAL "MSYS"
-           OR "${AOM_TARGET_SYSTEM}" STREQUAL "Windows")
+           OR "${AOM_TARGET_SYSTEM}" STREQUAL "Windows" OR CYGWIN)
       set(objformat "win64")
     else()
       set(objformat "elf64")
@@ -153,7 +153,7 @@ function(add_asm_library lib_name asm_so
                        WORKING_DIRECTORY "${AOM_CONFIG_DIR}"
                        VERBATIM)
     target_sources(aom PRIVATE "${asm_object}")
-    if(BUILD_SHARED_LIBS)
+    if(BUILD_SHARED_LIBS AND NOT CYGWIN)
       target_sources(aom_static PRIVATE "${asm_object}")
     endif()
   endforeach()
--- origsrc/aom/common/webmdec.cc	2020-08-10 08:32:43.000000000 +0900
+++ src/aom/common/webmdec.cc	2020-08-10 10:43:56.458591300 +0900
@@ -15,8 +15,13 @@
 #include <cstring>
 #include <cstdio>
 
+#if defined(SYSTEM_LIBWEBM)
+#include <mkvparser.hpp>
+#include <mkvreader.hpp>
+#else
 #include "third_party/libwebm/mkvparser/mkvparser.h"
 #include "third_party/libwebm/mkvparser/mkvreader.h"
+#endif
 
 namespace {
 
--- origsrc/aom/common/webmenc.cc	2020-08-10 08:32:43.000000000 +0900
+++ src/aom/common/webmenc.cc	2020-08-10 10:44:09.597017300 +0900
@@ -16,9 +16,16 @@
 #include <string>
 
 #include "common/av1_config.h"
+
+#if defined(SYSTEM_LIBWEBM)
+#include <mkvmuxer.hpp>
+#include <mkvmuxerutil.hpp>
+#include <mkvwriter.hpp>
+#else
 #include "third_party/libwebm/mkvmuxer/mkvmuxer.h"
 #include "third_party/libwebm/mkvmuxer/mkvmuxerutil.h"
 #include "third_party/libwebm/mkvmuxer/mkvwriter.h"
+#endif
 
 namespace {
 const uint64_t kDebugTrackUid = 0xDEADBEEF;
--- origsrc/aom/test/test.cmake	2020-08-10 08:32:44.000000000 +0900
+++ src/aom/test/test.cmake	2020-08-10 10:37:37.084104700 +0900
@@ -272,19 +272,25 @@ if(ENABLE_TESTS)
     set(CMAKE_MACOSX_RPATH 1)
   endif()
 
-  include_directories(
-    "${AOM_ROOT}/third_party/googletest/src/googletest/include")
-
-  include_directories("${AOM_ROOT}/third_party/googletest/src/googletest")
-  add_library(
-    aom_gtest STATIC
-    "${AOM_ROOT}/third_party/googletest/src/googletest/src/gtest-all.cc")
-  if(MSVC OR WIN32)
-    target_compile_definitions(aom_gtest PRIVATE GTEST_OS_WINDOWS=1)
-  elseif(CONFIG_MULTITHREAD AND CMAKE_USE_PTHREADS_INIT)
-    target_compile_definitions(aom_gtest PRIVATE GTEST_HAS_PTHREAD=1)
+  find_package(gtest)
+  if(GTEST_FOUND)
+    add_library(aom_gtest INTERFACE)
+    target_link_libraries(aom_gtest INTERFACE ${GTEST_LIBRARIES})
   else()
-    target_compile_definitions(aom_gtest PRIVATE GTEST_HAS_PTHREAD=0)
+    include_directories(
+      "${AOM_ROOT}/third_party/googletest/src/googletest/include")
+
+    include_directories("${AOM_ROOT}/third_party/googletest/src/googletest")
+    add_library(
+      aom_gtest STATIC
+      "${AOM_ROOT}/third_party/googletest/src/googletest/src/gtest-all.cc")
+    if(MSVC OR WIN32)
+      target_compile_definitions(aom_gtest PRIVATE GTEST_OS_WINDOWS=1)
+    elseif(CONFIG_MULTITHREAD AND CMAKE_USE_PTHREADS_INIT)
+      target_compile_definitions(aom_gtest PRIVATE GTEST_HAS_PTHREAD=1)
+    else()
+      target_compile_definitions(aom_gtest PRIVATE GTEST_HAS_PTHREAD=0)
+    endif()
   endif()
 endif()
 
@@ -345,10 +351,18 @@ function(setup_aom_test_targets)
   target_link_libraries(test_libaom ${AOM_LIB_LINK_TYPE} aom aom_gtest)
 
   if(CONFIG_LIBYUV)
-    target_sources(test_libaom PRIVATE $<TARGET_OBJECTS:yuv>)
+    if(LIBYUV_FOUND)
+      target_link_libraries(test_libaom PRIVATE ${LIBYUV_LIBRARIES})
+    else()
+      target_sources(test_libaom PRIVATE $<TARGET_OBJECTS:yuv>)
+    endif()
   endif()
   if(CONFIG_WEBM_IO)
-    target_sources(test_libaom PRIVATE $<TARGET_OBJECTS:webm>)
+    if(LIBWEBM_FOUND)
+      target_link_libraries(test_libaom PRIVATE ${LIBWEBM_LIBRARIES})
+    else()
+      target_sources(test_libaom PRIVATE $<TARGET_OBJECTS:webm>)
+    endif()
   endif()
   if(HAVE_SSE2)
     add_intrinsics_source_to_target("-msse2" "test_libaom"
