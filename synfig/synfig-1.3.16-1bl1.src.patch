--- origsrc/synfig-1.3.16/synfig-core/src/synfig/CMakeLists.txt	2020-08-06 17:59:42.000000000 +0900
+++ src/synfig-1.3.16/synfig-core/src/synfig/CMakeLists.txt	2020-08-12 22:36:52.167723800 +0900
@@ -6,6 +6,10 @@
 ## TODO: optional static linking?
 add_library(synfig SHARED "")
 
+if(CYGWIN)
+    set_target_properties(synfig PROPERTIES SOVERSION 0)
+endif()
+
 message(STATUS "MLT DIR: ${MLT_INCLUDE_DIRS}")
 
 target_include_directories(synfig
@@ -145,7 +149,8 @@ install(
 install(
     TARGETS synfig
     EXPORT synfig
-    LIBRARY DESTINATION lib
+    RUNTIME DESTINATION bin
+    ARCHIVE DESTINATION lib
 )
 
 export(
--- origsrc/synfig-1.3.16/synfig-core/src/synfig/module.cpp	2020-08-06 17:59:42.000000000 +0900
+++ src/synfig-1.3.16/synfig-core/src/synfig/module.cpp	2020-08-12 20:24:37.529932000 +0900
@@ -133,8 +133,11 @@ synfig::Module::Register(const String &m
 	lt_dlhandle module;
 
 	if(callback)callback->task(strprintf(_("Attempting to register \"%s\""),module_name.c_str()));
-
+#if defined(__CYGWIN__)
+	module=lt_dlopenext((string("cyg")+module_name).c_str());
+#else
 	module=lt_dlopenext((string("lib")+module_name).c_str());
+#endif
 	if(!module)module=lt_dlopenext(module_name.c_str());
 	Type::initialize_all();
 
--- origsrc/synfig-1.3.16/synfig-studio/src/synfigapp/CMakeLists.txt	2020-08-06 17:59:42.000000000 +0900
+++ src/synfig-1.3.16/synfig-studio/src/synfigapp/CMakeLists.txt	2020-08-12 22:36:29.992862300 +0900
@@ -1,5 +1,9 @@
 add_library(synfigapp SHARED "")
 
+if(CYGWIN)
+    set_target_properties(synfigapp PROPERTIES SOVERSION 0)
+endif()
+
 target_include_directories(synfigapp SYSTEM PUBLIC ${LIBXML_INCLUDE_DIRS})
 
 target_sources(synfigapp
@@ -27,5 +31,6 @@ include(vectorizer/CMakeLists.txt)
 
 install(
     TARGETS synfigapp
-    DESTINATION lib
+    RUNTIME DESTINATION bin
+    ARCHIVE DESTINATION lib
 )
--- origsrc/synfig-1.3.16/synfig-studio/src/synfigapp/vectorizer/centerlinepolygonizer.cpp	2020-08-06 17:59:42.000000000 +0900
+++ src/synfig-1.3.16/synfig-studio/src/synfigapp/vectorizer/centerlinepolygonizer.cpp	2020-08-12 18:45:48.942834800 +0900
@@ -806,7 +806,7 @@ inline void reduceBorder(RawBorder &bord
     int k;
     for (k = b[j]; k >= 0 && longestArcFrom[k] >= a; --k) 
     {
-      penaltyToEnd[k] = infinity;
+      penaltyToEnd[k] = studio::infinity;
       for (int i = a; i <= longestArcFrom[k]; ++i) 
       {
         double newPenalty = penaltyToEnd[i] + penalty(border, k, i);
--- origsrc/synfig-1.3.16/synfig-studio/src/synfigapp/vectorizer/centerlineskeletonizer.cpp	2020-08-06 17:59:42.000000000 +0900
+++ src/synfig-1.3.16/synfig-studio/src/synfigapp/vectorizer/centerlineskeletonizer.cpp	2020-08-12 18:47:41.039060500 +0900
@@ -652,8 +652,8 @@ void Timeline::build(ContourFamily &poly
 
 // Calculates event generated by input node
 Event::Event(ContourNode *generator, VectorizationContext *context)
-    : m_height(infinity)
-    , m_displacement(infinity)
+    : m_height(studio::infinity)
+    , m_displacement(studio::infinity)
     , m_generator(generator)
     , m_type(failure)
     , m_algorithmicTime(context->m_algorithmicTime)
--- origsrc/synfig-1.3.16/synfig-studio/src/synfigapp/vectorizer/centerlinetostrokes.cpp	2020-08-06 17:59:42.000000000 +0900
+++ src/synfig-1.3.16/synfig-studio/src/synfigapp/vectorizer/centerlinetostrokes.cpp	2020-08-12 18:51:07.802922200 +0900
@@ -44,7 +44,7 @@ using namespace studio;
 /* === G L O B A L S ======================================================= */
 const double Polyg_eps_max = 1;     // Sequence simplification max error
 const double Polyg_eps_mul = 0.75;  // Sequence simple thickness-multiplier error
-const double Quad_eps_max =  infinity;  // As above, for sequence conversion into strokes
+const double Quad_eps_max =  studio::infinity;  // As above, for sequence conversion into strokes
 synfig::Point bottomleft(0,0);
 bool max_thickness_zero = false;
 synfig::CanvasHandle canvas;
@@ -203,8 +203,8 @@ private:
 
     inline void infty(void) 
     {
-      n = infinity;
-      l = infinity;
+      n = studio::infinity;
+      l = studio::infinity;
     }
     inline bool operator<(Length sl) 
     {
@@ -368,8 +368,8 @@ public:
 
     inline void infty(void) 
     {
-      n = infinity;
-      l = infinity;
+      n = studio::infinity;
+      l = studio::infinity;
     }
 
     inline bool operator<(Length sl) 
@@ -501,7 +501,7 @@ etl::handle<synfig::Layer> SequenceConve
       // NOTE: The following else may be taken out to perform a deeper
       // search for optimal result. However, it prevents quadratic complexities
       // on large-scale images.
-      else if (l_ji.n == infinity)
+      else if (l_ji.n == studio::infinity)
         break;  // Stops searching for current i
     }
     M[a] = L_min;
