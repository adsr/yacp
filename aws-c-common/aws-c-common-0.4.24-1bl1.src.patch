--- origsrc/aws-c-common-0.4.24/CMakeLists.txt	2019-12-10 04:20:29.000000000 +0900
+++ src/aws-c-common-0.4.24/CMakeLists.txt	2019-12-31 00:31:42.363973900 +0900
@@ -14,7 +14,7 @@
 cmake_minimum_required(VERSION 3.0)
 option(STATIC_CRT "Windows specific option that to specify static/dynamic run-time library" OFF)
 
-project(aws-c-common LANGUAGES C VERSION 0.1.0)
+project(aws-c-common LANGUAGES C VERSION 0.4.24)
 
 if (POLICY CMP0069)
     cmake_policy(SET CMP0069 NEW) # Enable LTO/IPO if available in the compiler, see AwsCFlags
@@ -136,7 +136,11 @@ endif()
 
 # Our ABI is not yet stable
 set_target_properties(${PROJECT_NAME} PROPERTIES VERSION 1.0.0)
-set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 0unstable)
+if (CYGWIN)
+    set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 0)
+else()
+    set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 0unstable)
+endif()
 
 target_include_directories(${PROJECT_NAME} PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
@@ -203,12 +207,12 @@ else()
 endif()
 
 install(EXPORT "${PROJECT_NAME}-targets"
-    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/${TARGET_DIR}"
+    DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
     NAMESPACE AWS::
     COMPONENT Development)
 
 install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
-    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake"
+    DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
     COMPONENT Development)
 
 list(APPEND EXPORT_MODULES
@@ -222,7 +226,7 @@ list(APPEND EXPORT_MODULES
     )
 
 install(FILES ${EXPORT_MODULES}
-        DESTINATION "${LIBRARY_DIRECTORY}/cmake"
+        DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
         COMPONENT Development)
 
 # This should come last, to ensure all variables defined by cmake will be available for export
@@ -238,3 +242,10 @@ if (NOT CMAKE_CROSSCOMPILING)
 endif()
 
 include(CPackConfig)
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/aws-c-common.pc.in ${CMAKE_BINARY_DIR}/aws-c-common.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/aws-c-common.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/aws-c-common-0.4.24/aws-c-common.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/aws-c-common-0.4.24/aws-c-common.pc.in	2019-12-31 00:32:20.858052500 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: aws-c-common
+Description: Core c99 package for AWS SDK for C
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -laws-c-common
+Cflags: -I${includedir}
--- origsrc/aws-c-common-0.4.24/cmake/AwsCFlags.cmake	2019-12-10 04:20:29.000000000 +0900
+++ src/aws-c-common-0.4.24/cmake/AwsCFlags.cmake	2019-12-31 00:22:50.875747900 +0900
@@ -49,8 +49,10 @@ function(aws_set_common_properties targe
         list(APPEND AWS_C_FLAGS "${_FLAGS}")
 
     else()
-        list(APPEND AWS_C_FLAGS -Wall -Werror -Wstrict-prototypes)
-
+        list(APPEND AWS_C_FLAGS -Wall -Wstrict-prototypes)
+        if(NOT CYGWIN)
+            list(APPEND AWS_C_FLAGS -Werror)
+        endif()
         if(NOT SET_PROPERTIES_NO_WEXTRA)
             list(APPEND AWS_C_FLAGS -Wextra)
         endif()
--- origsrc/aws-c-common-0.4.24/cmake/aws-c-common-config.cmake	2019-12-10 04:20:29.000000000 +0900
+++ src/aws-c-common-0.4.24/cmake/aws-c-common-config.cmake	2019-12-31 00:23:11.845663000 +0900
@@ -1,9 +1,4 @@
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
 
-if (BUILD_SHARED_LIBS)
-    include(${CMAKE_CURRENT_LIST_DIR}/shared/@PROJECT_NAME@-targets.cmake)
-else()
-    include(${CMAKE_CURRENT_LIST_DIR}/static/@PROJECT_NAME@-targets.cmake)
-endif()
-
+include(${CMAKE_CURRENT_LIST_DIR}/@CMAKE_PROJECT_NAME@-targets.cmake)
--- origsrc/aws-c-common-0.4.24/source/arch/cpuid.c	2019-12-10 04:20:29.000000000 +0900
+++ src/aws-c-common-0.4.24/source/arch/cpuid.c	2019-12-31 00:23:46.123838300 +0900
@@ -36,7 +36,7 @@
 static int cpuid_state = 2;
 
 #ifndef HAVE_BUILTIN_CPU_SUPPORTS
-#    ifdef HAVE_MSVC_CPUIDEX
+#    if !defined(HAVE_BUILTIN_CPU_SUPPORTS) && !defined(HAVE_MAY_I_USE) && defined(HAVE_MSVC_CPUIDEX)
 static bool msvc_check_avx2(void) {
     int cpuInfo[4];
 
